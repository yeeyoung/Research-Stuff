%% Experiemnt data demonstration
% by Yi Yang
% Date: 9/30/2016
% data set: adm_Kp-3_Kev100
%--------------------------------------------------------------------------
clear all;
close all;
struct = importdata('test/20160929105124_adm_Kp=-3_Kimg=400.txt');
data = struct.data(:,:);
timeStamp = data(:, 1);
LoadCellForceA = data(:, 2);
MotorOutputA = data(:, 3);
RevPosA = data(:, 4);
RevPosB = data(:, 5);
CurrentA = data(:, 6);

% Admittance theoretical model
s = tf('s');
dataID = sysID();
Z_h = dataID.M * s + dataID.B; % the inherent impedance of haptic devices
Kve = 400; % [N/m], virtual environment spring constant
Z_ve = Kve/s; % impedance of virtual environment
C = -3; % portional control law
Z_padm = (dataID.n * C * Z_ve + Z_h)/(dataID.n * C + 1);

% Model constructed by experiment data
format long;
Ts=(timeStamp(end)-timeStamp(1))/(length(timeStamp)-1)/(10^5);
LinTime = timeStamp(1)/(10^5):Ts:timeStamp(end)/(10^5);
LinTime = LinTime';
% Resample_RevPosB = interp1(timeStamp(1:end-1)/(10^6), RevPosB(1:end-1), LinTime);
% Fuser = k * (Resample_RevPosB)/1000.0; % [N] ([N/m]*[m])
% Uo_sea = lsim(1/Z_psea, Fuser, LinTime);
Resample_RevPosA = interp1(timeStamp(1:end)/(10^5), RevPosA(1:end), LinTime);
Resample_LoadCellForceA = interp1(timeStamp(1:end)/(10^5), LoadCellForceA(1:end), LinTime);
% First order Euler backward difference methods to approximate velocity,
% [mm] -> [m]
V = diff([Resample_RevPosA(1); Resample_RevPosA])./diff([LinTime(1) - Ts; LinTime])/1000;
figure(1);
plot(LinTime, Resample_LoadCellForceA);
legend('LoadCellForceA');
figure(2);
plot(LinTime, Resample_RevPosA);
legend('RevPosA');
figure(3);
plot(LinTime, V);
legend('VelocityA');
% Then I will use experiment data to estimate system impedance
Fs = 1/Ts;
NFFT = 2^nextpow2(length(LinTime));
[Z_e_adm, freq_e] = tfestimate(V, Resample_LoadCellForceA, [], [], NFFT, Fs);
% Sample experiment and theoretical transfer function
[MagTh_adm, PhaseTh_adm, FreqTh_adm] = bode(Z_padm, {2*pi*3e-1, 2*pi*2e4});
Mag_adm = zeros(length(MagTh_adm), 1);
Freq_adm = FreqTh_adm./(2*pi);
for i = 1:length(MagTh_adm)
    Mag_adm(i, 1) = MagTh_adm(1, 1, i);
    Mag_adm(i, 1) = 20 * log10(Mag_adm(i, 1));
end
figure(4);
hold on;
semilogx(Freq_adm, Mag_adm, 'r');
semilogx(freq_e, mag2db(abs(Z_e_adm)));
set(gca,'xscale','log');
legend('the', 'exp');
title('Admittance');
grid on;
box on;
hold off;

Pos_des = Resample_

% figure(4);
% hold on;
% plot(LinTime, Fuser, 'b--');
% plot(LinTime, Uo, 'r');
% legend('Force', 'Velocity');
% title('Simulation');
% grid on;
% box on;
% hold off;